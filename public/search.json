[{"categories":["技术博客"],"content":"Floyd 判圈算法（Floyd’s Cycle Detection Algorithm） 什么是 Floyd 判圈算法？ Floyd 判圈算法，也叫 龟兔赛跑算法（Tortoise and Hare Algorithm），是一种用于检测链表中是否存在环的算法。该算法由 Robert W. Floyd 提出，旨在通过两个不同速度的指针遍历链表来判断链表是否存在循环。其时间复杂度为 O(n)，空间复杂度为 O(1)，因此在效率和资源占用方面非常优越。\n算法原理 Floyd 判圈算法使用两个指针：\n慢指针（Tortoise）：每次移动一步。 快指针（Hare）：每次移动两步。 如果链表中存在环，那么快指针和慢指针最终会在环中相遇。如果链表中不存在环，快指针会先到达链表的末端。\n主要步骤如下： 初始化两个指针：慢指针 slow 和快指针 fast 都指向链表的头部。 快指针每次移动两步，慢指针每次移动一步。 如果快指针和慢指针在某个时刻相遇，则说明链表中存在环。 如果快指针到达 null（链表的末尾），则说明链表中没有环。 代码实现 下面是使用 Python 实现的 Floyd 判圈算法：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def has_cycle(head): slow = head fast = head while fast is not None and fast.next is not None: slow = slow.next # 慢指针每次移动一步 fast = fast.next.next # 快指针每次移动两步 if slow == fast: # 如果相遇，则存在环 return True return False # 如果遍历结束没有相遇，则不存在环 ","description":"本文介绍了 Floyd 判圈算法的原理和应用，并结合代码示例讲解了如何通过该算法检测链表中的环。","tags":["算法","Floyd 判圈算法","数据结构"],"title":"Floyd 判圈算法（Floyd’s Cycle Detection Algorithm）","uri":"/posts/floyd-algorithm/"}]
